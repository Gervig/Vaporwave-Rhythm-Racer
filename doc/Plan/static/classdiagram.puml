@startuml
'https://plantuml.com/class-diagram

class Main {
+ static void main(String[] args
Game game = new game ("Vaporwave Rhythm Racer")
}

class Game {
- String name
- boolean gameRunning
- boolean mainMenuRunning
- boolean settingsMenuRunning
- boolean leaderboardsMenuRunning
- boolean exitGameMenuRunning
'maybe use tree map
- ArrayList<Integer> highScores

'objects
+ PApplet pApplet
+ AudioPlayer audioPlayer
+ Player player
+ Obstacle block
+ Obstacle speedUp
+ PowerUp heal
+ PowerUp slowTime
+ PowerUp superTime


'constructor
+ Game (String name)
+ void draw()
+ void setup()
+ void runStartMenu()
+ void settingsMenu()
'checks for player collisions
+ void runGameChecks()
+ void continueGame()
+ void playerDeath()
+ void quitProgram()
}

'extra feature for later
class AudioPlayer{
- boolean songPlaying

'constructor
+ AudioPlayer()
+ void playSong()
+ void stopSong()
}

'creates different obstacles
abstract class GameObject{
- double xPosition
- double zPosition

'constructor
+ GameObject(double xPosition, double zPosition)
+ double getXPosition()
+ double getZPosition()
}

abstract class CollisionObject{
- String name
- double yPosition

'constructor
+ CollisionObject(String name, double yPosition)
- void onCollision()
- void playSound()
+ double getYPosition()
+ double setYPosition()
}

'handles the player's input
class Player{
- int health
- int maxHealth
- int scorePoints
- boolean super = false

'constructor, set players health to 3 or w/e we want in the constructor & maxHealth
+ Player(int health)
+ int getHealth()
+ void changeHealth(int amount)
+ void changeScorePoints(int amount)
+ int getScorePoints()
+ void resetScorePoints()
}

class Obstacle{
- int damage
- int speedUpTimer

'constructor
+ Obstacle (int damage, int speedUpTimer)
+ int getDamage()
+ int getSpeedUpTimer()
'- boolean moreObstacles    adds more obstacles to the game for a short time
'- int moreObstaclesTimer
'- boolean hacked   add stuff to the screen that makes it hard to see the game
'- int hackedTimer
}

class PowerUp{
- int healing
- int superTimer
- int slowTimer
- int points

'constructor
+ PowerUp(int healing, int superTimer, int slowTimer, int points)
+ int getHealing()
+ int getSuper()
+ int getSlow()
+ int getPoints()
}

'creates buttons and general UI for the user to interact with
class GameUI{
- boolean overButton

'constructor
+ GameUI()
+ boolean promptBinary(String message)
+ int promptNumeric()
+ boolean overButton(Button button)
+ void mousePressed()
'+ void createSlider()      check processing "Handles" example
}

class Button{
- boolean showButton
- int width
- int height
- int xPosition
- int yPosition
- String message
- boolean buttonPressed

'constructor
+ Button (int x, int y, int width, int height, String message)
+ void drawButton(x, y, width, height, String message)
+ void buttonPressed()
+ Button getButton()
}

class Graphics{
- Vaporwave vaporwave

'constructor
+ Graphics()
+ drawGraphics()
}

class Vaporwave{
- color startColor
- color endColor
- color gridFill
- color gridStroke
- color sunColor
- int scl = 15
- int centerY
- int centerX
- int cols
- int rows
- int w
- int h
- float sunRadius = 100
- float hillHeight = 10
- float moving = 0
- float[][] landscape
- Moon[] moons = new Moon[16]
'constructor
+ Vaporwave(color startColor, color endColor, color gridFill, color gridStroke, color sunColor, int centerY, int centerX, int cols, int rows, int w, int h)
+ void drawVaporwave()
- void createMoonObjects()
- void createLandscape()
- void lights()
- void drawSky()
- void drawSun()
- void rotateCamera()
- void generateNoiseMap()
- void drawGrid()
- void drawGradient(float startY, float endY, color colorStart, color colorEnd)

}

class Moon{
 - color moonColor
' color moonColor = color(160, 255, 255); check if IntelliJ can do color like this
 - int startX
 - float moonSpeed
 - int t = 0
 - int size
 - int moonHeight
 - int moonEDFC
 'constructor
 + Moon(int startX, int size, float moonSpeed, int moonHeight, int moonEDFC)
 + void drawMoon()
}

'handles highscores
class FileIO{
- Scanner scanner
- String highscorePath

'constructor
+ FileIO ()
' use treeMap to sort list, so that the highest highscore gets displayed in the top
+ ArrayList<Integer> readScoreboard(String path)
+ void newScore(String path, int score, ArrayList<Integer>)
}

Main *-- Game
Game *-- FileIO
Game *-- GameUI
Game *-- GameObject
Game *-- Graphics
Game *-- AudioPlayer
GameObject o-- Player
GameObject *-- CollisionObject
CollisionObject o-- Obstacle
CollisionObject o-- PowerUp
GameUI o-- Button
Graphics o-- Vaporwave
Vaporwave o-- Moon

@enduml